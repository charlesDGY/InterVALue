
;; Function __bswap_32 (null)
;; enabled by -tree-original


{
  return __builtin_bswap32 (__bsx);
}


;; Function __bswap_64 (null)
;; enabled by -tree-original

{
  return (__uint64_t) __builtin_bswap64 (__bsx);
}


;; Function add (null)
;; enabled by -tree-original

{
  printf ((const char * restrict) "\n");
}


;; Function sub (null)
;; enabled by -tree-original

{
  int d = a - b;

    int d = a - b;
  return d;
}


;; Function main (null)
;; enabled by -tree-original

{
  int val = 12;
  int val2 = 6;
  int j = 32767;
  struct node2 * node44 = 0B;
  int * kk = (int *) malloc (4);
  int * point = kk;

    int val = 12;
    int val2 = 6;
    int j = 32767;
  j = (val + val2) * val2 - val;
  if (i > 0 && j <= 49)
    {
      goto <D.2712>;
      <D.2711>:;
      j = j + 5;
      <D.2712>:;
      if (j <= 99) goto <D.2711>; else goto <D.2713>;
      <D.2713>:;
    }
  else
    {
      j-- ;
    }
  if (val == 5)
    {
      val++ ;
      val2 = val % 2;
    }
    struct node2 * node44 = 0B;
  node44->p = 5;
  node44->j = 10;
    int * kk = (int *) malloc (4);
  *kk = 5;
    int * point = kk;
  if (*point != 5)
    {
      printf ((const char * restrict) "\n");
    }
  {
    int j = 5;
    int haha = 10;
    int k;
    char ma;

        int j = 5;
        int haha = 10;
        int k;
        char ma;
    if (k == 4)
      {
        printf ((const char * restrict) "\n");
      }
  }
  val = sub (add (i, j), val);
  goto <D.2726>;
  <D.2725>:;
  switch (val)
    {
      case 3:;
      sub (i, j);
      goto <D.2722>;
      case 8:;
      add (i, j);
      j = 6;
      goto <D.2722>;
      default:;
      i = 5;
    }
  <D.2722>:;
  <D.2726>:;
  if (i > 0) goto <D.2725>; else goto <D.2727>;
  <D.2727>:;
  printf ((const char * restrict) "%d\n", j);
  return 0;
}

