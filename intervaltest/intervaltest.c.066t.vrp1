
;; Function add (add, funcdef_no=39, decl_uid=3022, cgraph_uid=39)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

a_3(D): VARYING
b_4(D): VARYING
_5: VARYING


add (int a, int b)
{
  int _5;

  <bb 2>:
  __printf_chk (1, "\n");
  _5 = a_3(D) + b_4(D);
  return _5;

}



;; Function sub (sub, funcdef_no=40, decl_uid=3031, cgraph_uid=40)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after VRP:

a_1(D): VARYING
b_2(D): VARYING
d_3: VARYING


sub (int a, int b)
{
  int d;

  <bb 2>:
  d_3 = a_1(D) - b_2(D);
  return d_3;

}



;; Function main (main, funcdef_no=41, decl_uid=3035, cgraph_uid=41) (executed once)

Disambiguating loop 1 with multiple latches
Merged latch edges of loop 1
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 12 6 8 11 9 10
;;
;; Loop 1
;;  header 11, latch 8
;;  depth 1, outer 0
;;  nodes: 11 8 6 5 9 12
;;
;; Loop 2
;;  header 9, latch 12
;;  depth 2, outer 1
;;  nodes: 9 12 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 11 }
;; 5 succs { 12 8 6 }
;; 12 succs { 9 }
;; 6 succs { 8 }
;; 8 succs { 11 }
;; 11 succs { 9 }
;; 9 succs { 5 10 }
;; 10 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

j_8 -> { j_2 }
Incremental SSA update started at block: 11
Number of blocks in CFG: 13
Number of blocks to update: 3 ( 23%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

node44_27 -> { node44_10 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 13
Number of blocks to update: 1 (  8%)



Value ranges after VRP:

i_1: VARYING
j_2: [2, 95]
.MEM_3: VARYING
.MEM_4: VARYING
.MEM_5: VARYING
i_7(D): VARYING
j_8: [2, 95]
node44_10: VARYING
k_14(D): UNDEFINED
i_16: [-2, -2]
i_18: VARYING
.MEM_19: VARYING
j_21: [2, 6]
val_22: VARYING
node44_27: ~[0B, 0B]  EQUIVALENCES: { node44_10 } (1 elements)


Removing basic block 12
main (int i)
{
  int k;
  struct node2 * node44;
  int j;
  int val;

  <bb 2>:
  node44_10 = malloc (16);
  node44_10->p = 5;
  node44_10->j = 10;
  __printf_chk (1, "\n");
  if (k_14(D) == 4)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  __printf_chk (1, "\n");

  <bb 4>:
  __builtin_putchar (10);
  val_22 = i_7(D) + 83;
  goto <bb 8>;

  <bb 5>:
  switch (val_22) <default: <L25>, case 3: <L28>, case 8: <L16>>

<L16>:

  # j_21 = PHI <6(6), 2(5)>
<L28>:
  i_16 = -2;

  <bb 8>:
  # i_18 = PHI <-2(7), i_7(D)(4)>
  # j_2 = PHI <j_21(7), 95(4)>

  # i_1 = PHI <i_18(8), -2(5)>
<L25>:
  if (i_1 > 0)
    goto <bb 5>;
  else
    goto <bb 10>;

  <bb 10>:
  # j_8 = PHI <j_2(9)>
  __printf_chk (1, "%d\n", j_8);
  return 0;

}


